            BACKEND FOR BANKAPP
          ----------------------
  
  1. Create a server folder - bankapp-bbackend
  2. create a package.json file - npm init
  3. install express - npm i express - to create an application -> package-lock.json
  4. create index.js file
  5. using express create application - const server = express
  6. setup port number - server.listen(5000,()=>{})
  7. install cors
  8. cors - Cross Origin Resources Sharing
      It is an HTTP-header based mechanism implemented by the browser which allows  a server or an API (Application Programming Interface) to indicate any origins (different in terms of protocol, hostname, or port) other than its origin from whihc==ch the unknown origin gets permission to access and load resources. The cors package available in the npm registry is used to tackle CORS errors in a Node.js application
  9. Use cors in server application
  10. Resolve the API Requests
  11. What is JWT (JSON Web Token)?
    -> JWT refers to JSON Web Token
    -> Its a token in string form validated and generated by a web server.
    -> THis string based token helps in communicating between the client and the server.
    -> installation - npm i jsonwebtoken
    -> generatie token method - sign()
    -> usin JWT token, generate token for user who logged in successfully
    ->import jwt token in to logic.js file 
  12. MiddleWare Node.JS
    ->It is a function that plays a vital role in the request-respomse lifecycle of Nojde.JS execution.
    ->Using middleware functions, you can run any code and easily change response and request objects.

    ->Next () function?
      The next () function plays a vital role in applications' request and response cycle
      ->it is a middleware functionthat runs the next middleware function once it is invoked
      -> in other words, the next function os om=nvoked if the current middleware function dosen't end the request and response cycle.
      -> it is essential to note that no middleware function should be hanging in the queue
      ->

      Types of Node.JS middleware
        1. Applicstion level middleware
        ->application level middleware focuses on authenticating users.
        -> once the authentication request is received, the authentication middlewares invokes authentication code logic
        -> if the authentication is successful, the rest if the route is progressed with the help of the next function.
        ->on the other hand, od the authentication is unsuccessful, there is no progress in the route and the middleware releases error messages.

        2. Router level m=Middleware
          ->this middleware works int == the same way application-level middleware works.
          -> by using the express.error() function, this middleware supports creating and managing instances.
          -> moreover, you can load router level midlleware with the help if the route.use() function as well as route.METHOD() function.

  13. What is Node.JS?
  ->Node JS is an open-source as well as javascript runtime environment.
  ->As it supports cross-platform, you can run Node JS anywhere, whether it is windows, linux, or macOS. Node  Js is a patform that runs on the javascript engine
  ->by using node js, you can build dynamuc page content. Also you can open close, read, write, modify, create and delete files on the server.
  ->know that all APIs of 
  ->
  